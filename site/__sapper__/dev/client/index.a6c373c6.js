import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, o as onMount, v as validate_slots, a as space, e as element, t as text, q as query_selector_all, b as detach_dev, c as claim_space, f as claim_element, g as children, h as claim_text, j as attr_dev, k as add_location, l as insert_dev, m as append_dev, n as noop, p as validate_each_argument, r as set_data_dev, u as destroy_each } from './client.d8ae69ce.js';

/* src/routes/index.svelte generated by Svelte v3.23.2 */
const file = "src/routes/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (49:2) {:else}
function create_else_block(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text("LOADING...");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			t = claim_text(p_nodes, "LOADING...");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "svelte-8am6hs");
			add_location(p, file, 49, 4, 1111);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(49:2) {:else}",
		ctx
	});

	return block;
}

// (28:2) {#if members}
function create_if_block(ctx) {
	let table;
	let thead;
	let tr;
	let th0;
	let t0;
	let t1;
	let th1;
	let t2;
	let t3;
	let th2;
	let t4;
	let t5;
	let th3;
	let t6;
	let t7;
	let tbody;
	let each_value = /*members*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			table = element("table");
			thead = element("thead");
			tr = element("tr");
			th0 = element("th");
			t0 = text("Company");
			t1 = space();
			th1 = element("th");
			t2 = text("Share Value");
			t3 = space();
			th2 = element("th");
			t4 = text("Flights");
			t5 = space();
			th3 = element("th");
			t6 = text("Contribution");
			t7 = space();
			tbody = element("tbody");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			table = claim_element(nodes, "TABLE", { class: true });
			var table_nodes = children(table);
			thead = claim_element(table_nodes, "THEAD", {});
			var thead_nodes = children(thead);
			tr = claim_element(thead_nodes, "TR", {});
			var tr_nodes = children(tr);
			th0 = claim_element(tr_nodes, "TH", {});
			var th0_nodes = children(th0);
			t0 = claim_text(th0_nodes, "Company");
			th0_nodes.forEach(detach_dev);
			t1 = claim_space(tr_nodes);
			th1 = claim_element(tr_nodes, "TH", {});
			var th1_nodes = children(th1);
			t2 = claim_text(th1_nodes, "Share Value");
			th1_nodes.forEach(detach_dev);
			t3 = claim_space(tr_nodes);
			th2 = claim_element(tr_nodes, "TH", {});
			var th2_nodes = children(th2);
			t4 = claim_text(th2_nodes, "Flights");
			th2_nodes.forEach(detach_dev);
			t5 = claim_space(tr_nodes);
			th3 = claim_element(tr_nodes, "TH", {});
			var th3_nodes = children(th3);
			t6 = claim_text(th3_nodes, "Contribution");
			th3_nodes.forEach(detach_dev);
			tr_nodes.forEach(detach_dev);
			thead_nodes.forEach(detach_dev);
			t7 = claim_space(table_nodes);
			tbody = claim_element(table_nodes, "TBODY", {});
			var tbody_nodes = children(tbody);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(tbody_nodes);
			}

			tbody_nodes.forEach(detach_dev);
			table_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(th0, file, 31, 10, 677);
			add_location(th1, file, 32, 10, 704);
			add_location(th2, file, 33, 10, 735);
			add_location(th3, file, 34, 10, 762);
			add_location(tr, file, 30, 8, 662);
			add_location(thead, file, 29, 6, 646);
			add_location(tbody, file, 37, 6, 819);
			attr_dev(table, "class", "table is-striped");
			add_location(table, file, 28, 4, 607);
		},
		m: function mount(target, anchor) {
			insert_dev(target, table, anchor);
			append_dev(table, thead);
			append_dev(thead, tr);
			append_dev(tr, th0);
			append_dev(th0, t0);
			append_dev(tr, t1);
			append_dev(tr, th1);
			append_dev(th1, t2);
			append_dev(tr, t3);
			append_dev(tr, th2);
			append_dev(th2, t4);
			append_dev(tr, t5);
			append_dev(tr, th3);
			append_dev(th3, t6);
			append_dev(table, t7);
			append_dev(table, tbody);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*members*/ 1) {
				each_value = /*members*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tbody, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(table);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(28:2) {#if members}",
		ctx
	});

	return block;
}

// (39:8) {#each members as member}
function create_each_block(ctx) {
	let tr;
	let th;
	let t0_value = /*member*/ ctx[4].company + "";
	let t0;
	let t1;
	let td0;
	let t2;
	let t3_value = /*member*/ ctx[4].shareValue + "";
	let t3;
	let t4;
	let td1;
	let t5_value = /*member*/ ctx[4].flights + "";
	let t5;
	let t6;
	let td2;
	let t7;
	let t8_value = /*member*/ ctx[4].contributed + "";
	let t8;
	let t9;

	const block = {
		c: function create() {
			tr = element("tr");
			th = element("th");
			t0 = text(t0_value);
			t1 = space();
			td0 = element("td");
			t2 = text("$");
			t3 = text(t3_value);
			t4 = space();
			td1 = element("td");
			t5 = text(t5_value);
			t6 = space();
			td2 = element("td");
			t7 = text("$");
			t8 = text(t8_value);
			t9 = space();
			this.h();
		},
		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", {});
			var tr_nodes = children(tr);
			th = claim_element(tr_nodes, "TH", {});
			var th_nodes = children(th);
			t0 = claim_text(th_nodes, t0_value);
			th_nodes.forEach(detach_dev);
			t1 = claim_space(tr_nodes);
			td0 = claim_element(tr_nodes, "TD", {});
			var td0_nodes = children(td0);
			t2 = claim_text(td0_nodes, "$");
			t3 = claim_text(td0_nodes, t3_value);
			td0_nodes.forEach(detach_dev);
			t4 = claim_space(tr_nodes);
			td1 = claim_element(tr_nodes, "TD", {});
			var td1_nodes = children(td1);
			t5 = claim_text(td1_nodes, t5_value);
			td1_nodes.forEach(detach_dev);
			t6 = claim_space(tr_nodes);
			td2 = claim_element(tr_nodes, "TD", {});
			var td2_nodes = children(td2);
			t7 = claim_text(td2_nodes, "$");
			t8 = claim_text(td2_nodes, t8_value);
			td2_nodes.forEach(detach_dev);
			t9 = claim_space(tr_nodes);
			tr_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(th, file, 40, 12, 888);
			add_location(td0, file, 41, 12, 926);
			add_location(td1, file, 42, 12, 968);
			add_location(td2, file, 43, 12, 1006);
			add_location(tr, file, 39, 10, 871);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);
			append_dev(tr, th);
			append_dev(th, t0);
			append_dev(tr, t1);
			append_dev(tr, td0);
			append_dev(td0, t2);
			append_dev(td0, t3);
			append_dev(tr, t4);
			append_dev(tr, td1);
			append_dev(td1, t5);
			append_dev(tr, t6);
			append_dev(tr, td2);
			append_dev(td2, t7);
			append_dev(td2, t8);
			append_dev(tr, t9);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*members*/ 1 && t0_value !== (t0_value = /*member*/ ctx[4].company + "")) set_data_dev(t0, t0_value);
			if (dirty & /*members*/ 1 && t3_value !== (t3_value = /*member*/ ctx[4].shareValue + "")) set_data_dev(t3, t3_value);
			if (dirty & /*members*/ 1 && t5_value !== (t5_value = /*member*/ ctx[4].flights + "")) set_data_dev(t5, t5_value);
			if (dirty & /*members*/ 1 && t8_value !== (t8_value = /*member*/ ctx[4].contributed + "")) set_data_dev(t8, t8_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(39:8) {#each members as member}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let main;
	let h2;
	let t1;
	let t2;

	function select_block_type(ctx, dirty) {
		if (/*members*/ ctx[0]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			t0 = space();
			main = element("main");
			h2 = element("h2");
			t1 = text("Tiger Team1");
			t2 = space();
			if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-oofwcx\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			main = claim_element(nodes, "MAIN", {});
			var main_nodes = children(main);
			h2 = claim_element(main_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t1 = claim_text(h2_nodes, "Tiger Team1");
			h2_nodes.forEach(detach_dev);
			t2 = claim_space(main_nodes);
			if_block.l(main_nodes);
			main_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Sapper project template";
			attr_dev(h2, "class", "is-size-3");
			add_location(h2, file, 26, 2, 548);
			add_location(main, file, 25, 0, 539);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, main, anchor);
			append_dev(main, h2);
			append_dev(h2, t1);
			append_dev(main, t2);
			if_block.m(main, null);
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(main, null);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(main);
			if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let members;
	let Key = "KJWRFSERGWerDSWFWeoriwoWODESTRgSWDF:456787654Vjhved"; //process.env.KEY;
	let alliance_name = "tiger-team1";
	let URL = "/.netlify/functions/am4-alliance-api";

	onMount(async () => {
		const res = await fetch(URL, { method: "GET" });
		const data = await res.json();
		$$invalidate(0, members = data.members);
		window.scrollTo(0, 0);
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Routes", $$slots, []);

	$$self.$capture_state = () => ({
		onMount,
		members,
		Key,
		alliance_name,
		URL
	});

	$$self.$inject_state = $$props => {
		if ("members" in $$props) $$invalidate(0, members = $$props.members);
		if ("Key" in $$props) Key = $$props.Key;
		if ("alliance_name" in $$props) alliance_name = $$props.alliance_name;
		if ("URL" in $$props) URL = $$props.URL;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [members];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYTZjMzczYzYuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tIFwic3ZlbHRlXCI7XG5cbiAgbGV0IG1lbWJlcnM7XG4gIGxldCBLZXkgPSBcIktKV1JGU0VSR1dlckRTV0ZXZW9yaXdvV09ERVNUUmdTV0RGOjQ1Njc4NzY1NFZqaHZlZFwiOyAvL3Byb2Nlc3MuZW52LktFWTtcbiAgbGV0IGFsbGlhbmNlX25hbWUgPSAndGlnZXItdGVhbTEnO1xuICBsZXQgVVJMID0gJy8ubmV0bGlmeS9mdW5jdGlvbnMvYW00LWFsbGlhbmNlLWFwaSdcblxuICBvbk1vdW50KGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChVUkwsIHsgbWV0aG9kOiAnR0VUJyB9KTtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICBtZW1iZXJzID0gZGF0YS5tZW1iZXJzO1xuICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgfSlcbjwvc2NyaXB0PlxuPHN0eWxlPlxuICBwIHtcbiAgICBtYXJnaW46IDFlbSBhdXRvO1xuICB9XG48L3N0eWxlPlxuXG48c3ZlbHRlOmhlYWQ+XG4gIDx0aXRsZT5TYXBwZXIgcHJvamVjdCB0ZW1wbGF0ZTwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuXG48bWFpbj5cbiAgPGgyIGNsYXNzPVwiaXMtc2l6ZS0zXCI+VGlnZXIgVGVhbTE8L2gyPlxuICB7I2lmIG1lbWJlcnN9XG4gICAgPHRhYmxlIGNsYXNzPVwidGFibGUgaXMtc3RyaXBlZFwiPlxuICAgICAgPHRoZWFkPlxuICAgICAgICA8dHI+XG4gICAgICAgICAgPHRoPkNvbXBhbnk8L3RoPlxuICAgICAgICAgIDx0aD5TaGFyZSBWYWx1ZTwvdGg+XG4gICAgICAgICAgPHRoPkZsaWdodHM8L3RoPlxuICAgICAgICAgIDx0aD5Db250cmlidXRpb248L3RoPlxuICAgICAgICA8L3RyPlxuICAgICAgPC90aGVhZD5cbiAgICAgIDx0Ym9keT5cbiAgICAgICAgeyNlYWNoIG1lbWJlcnMgYXMgbWVtYmVyfVxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0aD57bWVtYmVyLmNvbXBhbnl9PC90aD5cbiAgICAgICAgICAgIDx0ZD4ke21lbWJlci5zaGFyZVZhbHVlfTwvdGQ+XG4gICAgICAgICAgICA8dGQ+e21lbWJlci5mbGlnaHRzfTwvdGQ+XG4gICAgICAgICAgICA8dGQ+JHttZW1iZXIuY29udHJpYnV0ZWR9PC90ZD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICB7L2VhY2h9XG4gICAgICA8L3Rib2R5PlxuICAgIDwvdGFibGU+XG4gIHs6ZWxzZX1cbiAgICA8cD5MT0FESU5HLi4uPC9wPlxuICB7L2lmfVxuPC9tYWluPiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OEJBc0NlLEdBQU87Ozs7Z0NBQVosTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NkJBQUMsR0FBTzs7OzsrQkFBWixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7O29DQUFKLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsyQkFFRyxHQUFNLElBQUMsT0FBTzs7Ozs7MkJBQ2IsR0FBTSxJQUFDLFVBQVU7Ozs7MkJBQ2xCLEdBQU0sSUFBQyxPQUFPOzs7OzsyQkFDYixHQUFNLElBQUMsV0FBVzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvRUFIbkIsR0FBTSxJQUFDLE9BQU87b0VBQ2IsR0FBTSxJQUFDLFVBQVU7b0VBQ2xCLEdBQU0sSUFBQyxPQUFPO29FQUNiLEdBQU0sSUFBQyxXQUFXOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrQkFoQjdCLEdBQU87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBeEJSLE9BQU87S0FDUCxHQUFHLEdBQUcscURBQXFEO0tBQzNELGFBQWEsR0FBRyxhQUFhO0tBQzdCLEdBQUcsR0FBRyxzQ0FBc0M7O0NBRWhELE9BQU87UUFDQyxHQUFHLFNBQVMsS0FBSyxDQUFDLEdBQUcsSUFBSSxNQUFNLEVBQUUsS0FBSztRQUN0QyxJQUFJLFNBQVMsR0FBRyxDQUFDLElBQUk7a0JBQzNCLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTztFQUN0QixNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
